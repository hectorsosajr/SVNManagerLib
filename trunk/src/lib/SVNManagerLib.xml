<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SVNManagerLib</name>
    </assembly>
    <members>
        <member name="T:SVNManagerLib.RepositoryAuthorization">
            <summary>
            A list of possible authorization modes for a
            Subversion repository.
            </summary>
        </member>
        <member name="F:SVNManagerLib.RepositoryAuthorization.Write">
            <summary>
            This repository will allow both read and write access.
            </summary>
        </member>
        <member name="F:SVNManagerLib.RepositoryAuthorization.Read">
            <summary>
            This repository will allow read-only access.
            </summary>
        </member>
        <member name="F:SVNManagerLib.RepositoryAuthorization.None">
            <summary>
            This is a private repository.
            </summary>
        </member>
        <member name="T:SVNManagerLib.RepositoryTypes">
            <summary>
            A list of currently supported Subversion repository backends.
            </summary>
        </member>
        <member name="F:SVNManagerLib.RepositoryTypes.BerkeleyDatabase">
            <summary>
            This repository uses the Berekely database.
            </summary>
        </member>
        <member name="F:SVNManagerLib.RepositoryTypes.FileSystem">
            <summary>
            This repository uses the file system.
            </summary>
        </member>
        <member name="T:SVNManagerLib.Common">
            <summary>
            Functions that are common across several classes.
            </summary>
        </member>
        <member name="M:SVNManagerLib.Common.GetCorrectedPath(System.String,System.Boolean)">
            <summary>
            Returns a fully qualified path for the current operating system.
            This also fixes the path separators according to the current
            Operating System.
            </summary>
            <param name="FullPath">The path to verify.</param>
            <param name="EndSeparator">A switch to tell the function whether it should check for a separator at the end of the path.</param>
        </member>
        <member name="M:SVNManagerLib.Common.GetPathFromFile(System.String)">
            <summary>
            Gets the path for the file with the correct path separators for the
            current operating system.
            </summary>
            <param name="FullPath">The file to verify.</param>
        </member>
        <member name="M:SVNManagerLib.Common.GetWellFormedSVNCommand(System.String)">
            <summary>
            Gets the correct path to the command being passed in. This
            takes into consideration which OS it is running on.
            </summary>
        </member>
        <member name="M:SVNManagerLib.Common.ExecuteSvnCommand(System.String,System.String,System.String@,System.String@)">
            <summary>
            Executes a well formed Subversion command against a command-line
            program.
            </summary>
            <param name="command">Well formed Subversion command.</param>
            <param name="arguments">Arguments that will be used for the Subversion command.</param>
            <param name="result">This is the output for the command after execution.</param>
            <param name="errors">This is the output for any errors during execution.</param>
            <returns>bool - Whether or not the command was successfully executed.</returns>
        </member>
        <member name="M:SVNManagerLib.Common.ExecuteWritesToDiskSvnCommand(System.String,System.String,System.String,System.String@)">
            <summary>
            Executes a well formed Subversion command that writes output to disk 
            against a command-line program.
            </summary>
            <param name="command">Well formed Subversion command.</param>
            <param name="arguments">Arguments that will be used for the Subversion command.</param>
            <param name="destinationFile">This is the file that this command will write output to.</param>
            <param name="errors">This is the output for any errors during execution.</param>
            <returns>bool - Whether or not the command was successfully executed.</returns>
        </member>
        <member name="M:SVNManagerLib.Common.GetFileList(System.String,System.String)">
            <summary>
            Returns a list of files for the directory that was passed in as a parameter.
            </summary>
            <param name="currentDirectory">The directory path to act upon.</param>
            <returns>Returns a hashtable with a list of files and directories under the directory that 
            was used for the parameter. The keys are the file/directory name without a path, the value
            is the full path to this directory or file.</returns>
            <param name="serverCmdPath">Path to where the Subversion command folder resides.</param>
        </member>
        <member name="M:SVNManagerLib.Common.ParseOutputIntoLines(System.String)">
            <summary>
            Parses the output from a Subversion command.
            </summary>
            <param name="consoleOutput">The raw output from a Subversion command.</param>
            <returns>A string array containing the parsed Subversion command output.</returns>
        </member>
        <member name="M:SVNManagerLib.Common.PathToFileUrl(System.String)">
            <summary>
            Converts a path to a "file:///" format.
            </summary>
            <param name="pathToConvert">That full path that will be converted to a file url.</param>
            <returns></returns>
        </member>
        <member name="T:SVNManagerLib.Repositories">
            <summary>
            This represents a list of repositories in the current Subversion server.
            </summary>
        </member>
        <member name="M:SVNManagerLib.Repositories.Add(SVNManagerLib.SVNUserCollection)">
            <summary>
            Adds the specified items.
            </summary>
            <param name="Items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:SVNManagerLib.Repositories.Add(SVNManagerLib.SVNRepository)">
            <summary>
            Strongly typed Add method.
            </summary>
            <param name="Item">An instance of <see cref="T:SVNManagerLib.SVNRepository"/> class.</param>
            <returns>The position index where this <see cref="T:SVNManagerLib.SVNRepository"/> instance was inserted.</returns>
        </member>
        <member name="M:SVNManagerLib.Repositories.Insert(System.Int32,SVNManagerLib.SVNRepository)">
            <summary>
            Strongly typed Insert method.
            </summary>
            <param name="Index">The index to where this <see cref="T:SVNManagerLib.SVNRepository"/> instance should be inserted.</param>
            <param name="Item">An instance of <see cref="T:SVNManagerLib.SVNRepository"/> class.</param>
        </member>
        <member name="M:SVNManagerLib.Repositories.Remove(SVNManagerLib.SVNRepository)">
            <summary>
            Removes a specific <see cref="T:SVNManagerLib.SVNRepository"/> instance.
            </summary>
            <param name="Item">An instance of <see cref="T:SVNManagerLib.SVNRepository"/> class.</param>
        </member>
        <member name="M:SVNManagerLib.Repositories.Contains(SVNManagerLib.SVNRepository)">
            <summary>
            Checks if this collection has the specified <see cref="T:SVNManagerLib.SVNRepository"/> instance.
            </summary>
            <param name="Item">An instance of <see cref="T:SVNManagerLib.SVNRepository"/> class.</param>
            <returns></returns>
        </member>
        <member name="P:SVNManagerLib.Repositories.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:SVNManagerLib.SVNRepository"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:SVNManagerLib.Repositories.Item(System.String)">
            <summary>
            Gets the <see cref="T:SVNManagerLib.SVNRepository"/> with the specified repo name.
            </summary>
            <value></value>
        </member>
        <member name="T:SVNManagerLib.SVNController">
            <summary>
            This class controls actions in SVNManagerLib. This is the top
            level class/object in this namespace.
            </summary>
        </member>
        <member name="M:SVNManagerLib.SVNController.#ctor">
            <summary>
            Default empty constructor
            </summary>
        </member>
        <member name="M:SVNManagerLib.SVNController.#ctor(System.String)">
            <summary>
            Load settings from the specified path.
            </summary>
        </member>
        <member name="M:SVNManagerLib.SVNController.#ctor(SVNManagerLib.SVNServerConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:SVNManagerLib.SVNController"/> class
            using a <see cref="T:SVNManagerLib.SVNServerConfig"/> object.
            </summary>
            <param name="config">The configuration object for the server.</param>
        </member>
        <member name="M:SVNManagerLib.SVNController.#ctor(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SVNManagerLib.SVNController"/> class.
            </summary>
            <param name="RepositoryPaths">A list of repository paths.</param>
            <param name="CommandPath">The command path to the Subversion command-line utilities.</param>
        </member>
        <member name="P:SVNManagerLib.SVNController.ServerConfiguration">
            <summary>
            Holds a <see cref="T:SVNManagerLib.SVNServerConfig"/> object for this server.
            </summary>
        </member>
        <member name="P:SVNManagerLib.SVNController.RepositoryCollection">
            <summary>
            Holds a collection of SVNRepsitory objects, one
            for each repository in this server.
            </summary>
        </member>
        <member name="P:SVNManagerLib.SVNController.AdminUsers">
            <summary>
            Holds a list of <see cref="T:SVNManagerLib.SVNUser"/> objects that have administrative rights.
            </summary>
            <remarks>This is not part of the default Subversion functionality. This is a function
            of this library. This will be used to synchronize users between user silos in
            external systems such as Active Directory, LADP, etc.</remarks>
        </member>
        <member name="T:SVNManagerLib.SVNFileSystemEntity">
            <summary>
            Represents a file or folder inside a Subversion repository.
            </summary>
        </member>
        <member name="M:SVNManagerLib.SVNFileSystemEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SVNManagerLib.SVNFileSystemEntity"/> class.
            </summary>
        </member>
        <member name="M:SVNManagerLib.SVNFileSystemEntity.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SVNManagerLib.SVNFileSystemEntity"/> class.
            </summary>
            <param name="pathToEntity">The path to entity.</param>
            <param name="entityName">Name of the entity.</param>
        </member>
        <member name="M:SVNManagerLib.SVNFileSystemEntity.LoadInfo(System.String)">
            <summary>
            Loads the information for this file or folder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SVNManagerLib.SVNFileSystemEntity.LoadProperties(System.String)">
            <summary>
            Loads the properties for this file or folder.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SVNManagerLib.SVNFileSystemEntity.FullPath">
            <summary>
            Gets or sets the full path.
            </summary>
            <value>The full path.</value>
        </member>
        <member name="P:SVNManagerLib.SVNFileSystemEntity.EntityName">
            <summary>
            Gets or sets the name of the file system entity.
            </summary>
            <value>The name of the file or folder.</value>
        </member>
        <member name="P:SVNManagerLib.SVNFileSystemEntity.Information">
            <summary>
            Gets or sets the information.
            </summary>
            <value>The information.</value>
        </member>
        <member name="P:SVNManagerLib.SVNFileSystemEntity.Properties">
            <summary>
            Gets or sets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="T:SVNManagerLib.SVNHook">
            <summary>
             Represents a single Subversion hook file.
            </summary>
        </member>
        <member name="M:SVNManagerLib.SVNHook.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SVNManagerLib.SVNHook"/> class.
            </summary>
        </member>
        <member name="T:SVNManagerLib.SVNRepoConfig">
            <summary>
            This class provides read/write access to repository-wide configuration
            settings. This uses the Nini configuration library at
            http://nini.sourceforge.net/
            </summary>
        </member>
        <member name="M:SVNManagerLib.SVNRepoConfig.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:SVNManagerLib.SVNRepoConfig.#ctor(System.String)">
            <summary>
            Loads a repository configuration information.
            </summary>
            <param name="RepositoryPath">The path to the repository.</param>
        </member>
        <member name="M:SVNManagerLib.SVNRepoConfig.UpdateAuthorization">
            <summary>
            Updates the repository authorization settings in the svnserve.conf file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SVNManagerLib.SVNRepoConfig.ConvertStringToAuth(System.String)">
            <summary>
            Converts a string to RepositoryAuthorization enum.
            </summary>
            <param name="authenticationString">The authentication string to convert.</param>
            <returns></returns>
        </member>
        <member name="P:SVNManagerLib.SVNRepoConfig.UserDatabaseFileName">
            <summary>
            The file that contains the user accounts.
            </summary>
        </member>
        <member name="P:SVNManagerLib.SVNRepoConfig.RepositoryRootDirectory">
            <summary>
            The root directory for this repository.
            </summary>
        </member>
        <member name="P:SVNManagerLib.SVNRepoConfig.AnonymousAccess">
            <summary>
            Gets or sets the anonymous access.
            </summary>
            <value>The anonymous access.</value>
        </member>
        <member name="P:SVNManagerLib.SVNRepoConfig.AuthorizedAccess">
            <summary>
            Gets or sets the authorized access.
            </summary>
            <value>The authorized access.</value>
        </member>
        <member name="P:SVNManagerLib.SVNRepoConfig.RepositoryType">
            <summary>
            Holds the string contained in the fs-type file
            inside the db folder.
            </summary>
        </member>
        <member name="P:SVNManagerLib.SVNRepoConfig.RepositoryUUID">
            <summary>
            Holds the UUID (Universal Unique IDentifier) for this repository.
            </summary>
            <remarks>
            This seems to be in GUID format.
            </remarks>
        </member>
        <member name="T:SVNManagerLib.CreateRepositoryArgs">
            <summary>
            Arguments for the "svnadmin create" command.
            </summary>
        </member>
        <member name="F:SVNManagerLib.CreateRepositoryArgs.RepositoryType">
            <summary>
            The type of back end this repository will be using. This
            uses one of the types in <see cref="T:SVNManagerLib.RepositoryTypes"/>.
            </summary>
        </member>
        <member name="F:SVNManagerLib.CreateRepositoryArgs.RepositoryName">
            <summary>
            The name of the new repository. This will also be the folder
            name under the repository root folder.
            </summary>
        </member>
        <member name="T:SVNManagerLib.DumpArgs">
            <summary>
            Arguments for the "svnadmin dump" command.
            </summary>
        </member>
        <member name="F:SVNManagerLib.DumpArgs.RevisionArg">
            <summary>
            The revision number to dump. This can also be
            a range in the X:Y format.
            </summary>
        </member>
        <member name="F:SVNManagerLib.DumpArgs.DumpFileName">
            <summary>
            The name that will be given to this dump file.
            </summary>
        </member>
        <member name="F:SVNManagerLib.DumpArgs.UseIncremental">
            <summary>
            Whether or not to use an incremental dump.
            </summary>
        </member>
        <member name="F:SVNManagerLib.DumpArgs.UseQuiet">
            <summary>
            Whether or not to show progress. Also known as verbose.
            </summary>
        </member>
        <member name="F:SVNManagerLib.DumpArgs.RepositoryName">
            <summary>
            The name of the new repository. This will also be the folder
            name under the repository root folder.
            </summary>
        </member>
        <member name="T:SVNManagerLib.HotCopyArgs">
            <summary>
            Arguments for the "svnadmin hotcopy" command.
            </summary>
        </member>
        <member name="F:SVNManagerLib.HotCopyArgs.DestinationPath">
            <summary>
            The destination folder for the hot copy.
            </summary>
        </member>
        <member name="F:SVNManagerLib.HotCopyArgs.UseCleanLogs">
            <summary>
            Whether or not to remove the redundant log files
            from the source repository. This only works for
            BerkeleyDB repositories.
            </summary>
        </member>
        <member name="T:SVNManagerLib.SVNRepository">
            <summary>
            This represents a single repository in the current Subversion server.
            </summary>
        </member>
        <member name="M:SVNManagerLib.SVNRepository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SVNManagerLib.SVNRepository"/> class.
            </summary>
        </member>
        <member name="M:SVNManagerLib.SVNRepository.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SVNManagerLib.SVNRepository"/> class.
            </summary>
            <param name="RepositoryPath">The repository path.</param>
            <param name="ServerCommandPath">Path to where the Subversion commands are located.</param>
        </member>
        <member name="M:SVNManagerLib.SVNRepository.CreateBerkeleyDbRepository(System.String)">
            <summary>
            Creates a repository with a Berkeley database backend.
            </summary>
            <param name="repoName">The name of the desired new repository.</param>
            <returns>Whether or not this operation was successful.</returns>
        </member>
        <member name="M:SVNManagerLib.SVNRepository.CreateFSFSRepository(System.String)">
            <summary>
            Creates a repository with the OS filesystem as the backend.
            </summary>
            <param name="repoName">The name of the desired new repository.</param>
            <returns>Whether or not this operation was successful.</returns>
        </member>
        <member name="M:SVNManagerLib.SVNRepository.DeleteRepository">
            <summary>
            Deletes the repository and all its subfolders from the hard drive.
            </summary>
            <returns>Whether or not this operation was successful.</returns>
        </member>
        <member name="M:SVNManagerLib.SVNRepository.DumpRepository(SVNManagerLib.DumpArgs)">
            <summary>
            Creates a dumpfile portable format of this repository.
            </summary>
            <param name="args">An instance of <see cref="T:SVNManagerLib.DumpArgs"/>.</param>
            <returns>Whether or not this operation was successful.</returns>
        </member>
        <member name="M:SVNManagerLib.SVNRepository.HotCopyRepository(SVNManagerLib.HotCopyArgs)">
            <summary>
            Creates an exact copy of the repository to a different folder.
            </summary>
            <param name="args">An instance of <see cref="T:SVNManagerLib.HotCopyArgs"/>.</param>
            <returns>Whether or not this operation was successful.</returns>
        </member>
        <member name="M:SVNManagerLib.SVNRepository.CreateDirectory(System.String,System.String)">
            <summary>
            Creates a new directory using the "svn mkdir" command.
            </summary>
            <param name="directoryName">This includes the current directory plus the new name. This is a directory fragment and not a full path.</param>
            <param name="message">The "svn mkdir" command commits immediately and it requires a comment.</param>
            <returns>Returns whether or not the command was successful.</returns>
        </member>
        <member name="M:SVNManagerLib.SVNRepository.DeleteDirectory(System.String,System.String)">
            <summary>
            Deletes a directory or file using the "svn delete" command.
            </summary>
            <param name="directoryPath">The full path to a directory or file.</param>
            <param name="message">The "svn delete" command commits immediately and it requires a comment.</param>
            <returns>Returns whether or not the command was successful.</returns>
        </member>
        <member name="P:SVNManagerLib.SVNRepository.AnonymousAccess">
            <summary>
            Holds what <see cref="T:SVNManagerLib.RepositoryAuthorization">rights</see> do the anonymous users have
            for this repository.
            </summary>
        </member>
        <member name="P:SVNManagerLib.SVNRepository.AuthorizedAccess">
            <summary>
            Holds what <see cref="T:SVNManagerLib.RepositoryAuthorization">rights</see> do the authenticated users have 
            for this repository.
            </summary>
        </member>
        <member name="P:SVNManagerLib.SVNRepository.FullPath">
            <summary>
            The full path to this repository.
            </summary>
        </member>
        <member name="P:SVNManagerLib.SVNRepository.Name">
            <summary>
            The name of this repository. This is usually the root folder
            name of the repository
            </summary>
        </member>
        <member name="P:SVNManagerLib.SVNRepository.RepositoryConfiguration">
            <summary>
            The <see cref="T:SVNManagerLib.SVNRepoConfig"/> managing this repository's
            configuration settings.
            </summary>
        </member>
        <member name="P:SVNManagerLib.SVNRepository.Users">
            <summary>
            A list of <see cref="T:SVNManagerLib.SVNUser"/> that are associated with
            this repository.
            </summary>
        </member>
        <member name="P:SVNManagerLib.SVNRepository.Administrators">
            <summary>
            A list of <see cref="T:SVNManagerLib.SVNUser"/> that are associated with
            this repository and have administrative rights.
            </summary>
        </member>
        <member name="P:SVNManagerLib.SVNRepository.RepositoryType">
            <summary>
            Holds the back end that this repository is using.
            </summary>
        </member>
        <member name="P:SVNManagerLib.SVNRepository.RepositoryUUID">
            <summary>
            Holds the Universal Unique IDentifier (UUID) for this repository.
            </summary>
        </member>
        <member name="P:SVNManagerLib.SVNRepository.Files">
            <summary>
            Holds a list of files and folders for this repository
            </summary>
        </member>
        <member name="P:SVNManagerLib.SVNRepository.SeverCommandsPath">
            <summary>
            Gets the sever commands path.
            </summary>
            <value>The sever commands path.</value>
        </member>
        <member name="P:SVNManagerLib.SVNRepository.FirstRepoUserName">
            <summary>
            Gets or sets the name of the first repo user.
            </summary>
            <value>The name of the first repo user.</value>
        </member>
        <member name="P:SVNManagerLib.SVNRepository.FirstRepoUserPassword">
            <summary>
            Gets or sets the first repo user password.
            </summary>
            <value>The first repo user password.</value>
        </member>
        <member name="T:SVNManagerLib.SVNServerConfig">
            <summary>
            This class provides read/write access to server-wide configuration
            settings. This uses the Nini configuration library at
            http://nini.sourceforge.net/
            </summary>
        </member>
        <member name="M:SVNManagerLib.SVNServerConfig.#ctor">
            <summary>
            Default constructor
            This class defaults the configuration file 
            to "svnmanagerlib.ini"
            </summary>
        </member>
        <member name="M:SVNManagerLib.SVNServerConfig.#ctor(System.String)">
            <summary>
            This class defaults to "svnmanagerlib.ini"
            This allows for a different configuration file.
            </summary>
            <param name="ConfigFilePath">The path to the user selected config file.</param>
        </member>
        <member name="M:SVNManagerLib.SVNServerConfig.Save">
            <summary>
            Saves the current values to the config file.
            </summary>
            <returns>Whether or not the save action was successful.</returns>
        </member>
        <member name="P:SVNManagerLib.SVNServerConfig.CommandRootDirectory">
            <summary>
            This is the directory where the actual command-line
            programs reside.
            </summary>
            <remarks>It looks like some Linux distributions install the
            command-line programs to different locations.</remarks>
        </member>
        <member name="P:SVNManagerLib.SVNServerConfig.ServerRootDirectory">
            <summary>
            This is the topmost directory. This is where the
            Subversion server binaries get installed.
            </summary>
        </member>
        <member name="P:SVNManagerLib.SVNServerConfig.RepositoryRootDirectory">
            <summary>
            This is the root directory for all the repositories.
            </summary>
            <remarks>svnserve.exe should be configured with the -r argument on this
            directory in order for this to work correctly.</remarks>
        </member>
        <member name="P:SVNManagerLib.SVNServerConfig.ConfigFileName">
            <summary>
            Gets or sets the name of the config file.
            </summary>
            <value>The name of the config file.</value>
        </member>
        <member name="P:SVNManagerLib.SVNServerConfig.RepositoryMode">
            <summary>
            Gets or sets the repository mode.
            </summary>
            <value>This will contain the word "root" for all the repositories under one
            directory, and the word "custom" for each repository in a different directory.</value>
        </member>
        <member name="T:SVNManagerLib.SVNUser">
            <summary>
            This represents a user in a Subversion repository.
            </summary>
        </member>
        <member name="M:SVNManagerLib.SVNUser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SVNManagerLib.SVNUser"/> class.
            </summary>
        </member>
        <member name="M:SVNManagerLib.SVNUser.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SVNManagerLib.SVNUser"/> class.
            </summary>
            <param name="UserName">Name of the user.</param>
            <param name="Password">The password.</param>
            <param name="ParentRepositoryPath">The parent repository path.</param>
        </member>
        <member name="M:SVNManagerLib.SVNUser.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SVNManagerLib.SVNUser"/> class.
            </summary>
            <param name="UserName">Name of the user.</param>
            <param name="Password">The password.</param>
            <param name="ParentRepositoryPath">The parent repository path.</param>
            <param name="IsAdmin">if set to <c>true</c> [is admin].</param>
        </member>
        <member name="M:SVNManagerLib.SVNUser.Save">
            <summary>
            Saves this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SVNManagerLib.SVNUser.Delete">
            <summary>
            Deletes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SVNManagerLib.SVNUser.GrantAdminStatus">
            <summary>
            Grants the admin status to this user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SVNManagerLib.SVNUser.RevokeAdminStatus">
            <summary>
            Revokes the admin status for this user.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SVNManagerLib.SVNUser.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>The name of the user.</value>
        </member>
        <member name="P:SVNManagerLib.SVNUser.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:SVNManagerLib.SVNUser.IsAdmin">
            <summary>
            Gets or sets a value indicating whether this user is an admin.
            </summary>
            <value><c>true</c> if this instance is admin; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SVNManagerLib.SVNUser.IsNew">
            <summary>
            Gets or sets a value indicating whether this instance is new.
            </summary>
            <value><c>true</c> if this instance is new; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SVNManagerLib.SVNUser.IsDirty">
            <summary>
            Gets or sets a value indicating whether this instance is dirty.
            </summary>
            <value><c>true</c> if this instance is dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SVNManagerLib.SVNUser.IsDeleted">
            <summary>
            Gets or sets a value indicating whether this instance is deleted.
            </summary>
            <value>
            	<c>true</c> if this instance is deleted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SVNManagerLib.SVNUser.ParentRepositoryPath">
            <summary>
            Gets or sets the parent repository path.
            </summary>
            <value>The parent repository path.</value>
        </member>
        <member name="P:SVNManagerLib.SVNUser.UserDatabasePath">
            <summary>
            Gets or sets the user database path.
            </summary>
            <value>The user database path.</value>
        </member>
        <member name="T:SVNManagerLib.SVNUserCollection">
            <summary>
            This represents a list of <see cref="T:SVNManagerLib.SVNUser"/> objects.
            </summary>
        </member>
        <member name="M:SVNManagerLib.SVNUserCollection.Add(SVNManagerLib.SVNUserCollection)">
            <summary>
            Adds the specified items.
            </summary>
            <param name="Items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:SVNManagerLib.SVNUserCollection.Add(SVNManagerLib.SVNUser)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="Item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:SVNManagerLib.SVNUserCollection.Insert(System.Int32,SVNManagerLib.SVNUser)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="Index">The index.</param>
            <param name="Item">The item.</param>
        </member>
        <member name="M:SVNManagerLib.SVNUserCollection.Remove(SVNManagerLib.SVNUser)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="Item">The item.</param>
        </member>
        <member name="M:SVNManagerLib.SVNUserCollection.Contains(SVNManagerLib.SVNUser)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="Item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SVNManagerLib.SVNUserCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:SVNManagerLib.SVNUser"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:SVNManagerLib.SVNUserProvider">
            <summary>
            This class provides read/write access to individual user
            settings. This uses the Nini configuration library at
            http://nini.sourceforge.net/
            </summary>
        </member>
        <member name="M:SVNManagerLib.SVNUserProvider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:SVNManagerLib.SVNUserProvider.#ctor(System.String,System.String)">
            <summary>
            Constructor to set the username and password.
            </summary>
            <param name="UserName">The user's account name.</param>
            <param name="Password">The user's account password.</param>
        </member>
        <member name="M:SVNManagerLib.SVNUserProvider.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor to set the username, password, and repository path.
            </summary>
            <param name="UserName">The user's account name.</param>
            <param name="Password">The user's account password.</param>
            <param name="RepositoryPath">The path to the repository where this user will be created.</param>
        </member>
        <member name="M:SVNManagerLib.SVNUserProvider.Save">
            <summary>
            Saves this user's information to the user's database file.
            </summary>
            <returns>Returns whether or not the command was successful.</returns>
        </member>
        <member name="M:SVNManagerLib.SVNUserProvider.Add">
            <summary>
            Adds a new user to the repository's user database.
            </summary>
            <returns>Returns whether or not the command was successful.</returns>
        </member>
        <member name="M:SVNManagerLib.SVNUserProvider.Delete">
            <summary>
            Deletes this user from the repository's user database.
            </summary>
            <returns>Returns whether or not the command was successful.</returns>
        </member>
        <member name="M:SVNManagerLib.SVNUserProvider.AddAdmin">
            <summary>
            Adds this user to the repository's admin user database.
            </summary>
            <returns>Returns whether or not the command was successful.</returns>
        </member>
        <member name="M:SVNManagerLib.SVNUserProvider.DeleteAdmin">
            <summary>
            Deletes this user from the repository's admin user database.
            </summary>
            <returns>Returns whether or not the command was successful.</returns>
        </member>
        <member name="P:SVNManagerLib.SVNUserProvider.UserName">
            <summary>
            The account's user name.
            </summary>
        </member>
        <member name="P:SVNManagerLib.SVNUserProvider.Password">
            <summary>
            The account's password.
            </summary>
        </member>
        <member name="P:SVNManagerLib.SVNUserProvider.RepositoryPath">
            <summary>
            The physical path to the repository where this account resides.
            </summary>
        </member>
    </members>
</doc>
